- log averages, display on website
- make private functions only used within one other functions sub-functions of that function
- item procs
- test. stats unit tests. flurry, e.g. candidate sorting.
- rename repo
- improve log entries, aim for complete transparency:
  - damage reduction from boss armor
  - average hits / crits / glances of each ability
  - attack table (chances)
  - flurry uptime

read up on simulation basics

x model buffs (own, other classes, consumables)
model procs (items, talents, enchants)
talents: deep wounds, flurry, imp. berserker rage
model on-use effects (items, heroism, consumables (mighty rage potion, juju flurry))
x model boss buffs / debuffs
x event queue
x ability comes off cd = event, end of gcd = event
x model rage, on_rage_gained callback
model ability priorities
run sim n times (use confidence interval to define n) on boss x, output dps, dps per ability, stat weights
are floats an issue? if yes, how to get around floating point arithmetics?
rounding: when to round / floor / ceil?
refactor debuffs (like buffs)
model debuffs only on boss after some time, cd stacking, ...
outsource ability cost etc. config. all knowledge if possible. support multiple expansions if possible.
fight duration: draw randomly around configured duration
performance improvements: cache all calculations with fixed result

on_rage_gain checks:
x dw, x gcd, x bt, x ww, hs, execute, bs, op

abilities to model:
prio 1:
x bt
x ww
x bloodrage
x death wish
x recklessness
hs

prio 2:
execute
battle shout
op (less crit @ battle)

tests / lookups:
death wish gcd? reck gcd?
bt, ww cds
check calculated stats = stats in char window
which abilities cost how much rage when dodged, missed?
5% base crit double-check
white hit weapon damage actually randomly drawn in dmg range or just the average?
what about ww?
